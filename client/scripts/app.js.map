{"version":3,"sources":["app.js"],"names":["width","height","g","stats","svg","d3","select","attrs","zips","filterZipsAndMapData","zipcodes","options","minZip","maxZip","drawMap","projection","geoAlbersUsa","scale","translate","array","Object","values","zipcodeData","e","extent","el","propToScaleBy","scaleLinear","domain","range","minColor","maxColor","path","geoPath","drawLegend","zoom","on","zoomed","call","append","attr","selectAll","data","topojson","feature","objects","zcs","features","enter","class","d","fill","value","properties","stroke","clicked","event","transform","console","log","document","querySelector","innerText","ZCTA5CE10","key","exampleObject","statEl","node","createElement","li","appendChild","innerHTML","split","join","toUpperCase","bw","l","text","x","y","colors","i","getBBox","lbb","min","max","geometries","filter","obj","z"],"mappings":"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","file":"app.js","sourcesContent":["/*\n*  RUN\n*/\n\nlet width = 900,\n    height = 600,\n    g, stats;\n\nlet svg = d3.select('svg').attrs({\n    width: width,\n    height: height\n  })\nlet zips = filterZipsAndMapData(zipcodes, options.minZip, options.maxZip)\n// without the fetch\ndrawMap(zips)\n\n\n/*\n*  HELPERS\n*/\n\nfunction drawMap(zips){\n\n  \n  // SCALE AND TRANSLATE BASED ON POSITION OF DETROIT\n  let projection = d3.geoAlbersUsa()\n                      .scale(30000)\n                      .translate([width * -5.5, height * 4]);\n\n  //init SCALE\n  let array = Object.values(zipcodeData)\n  let e = d3.extent(array, el => el[options.propToScaleBy])\n  // drawLegend(e[0], e[1])\n\n  let scale = d3.scaleLinear()\n                .domain([e[0], e[1]])\n                .range([options.minColor, options.maxColor])\n\n  let path = d3.geoPath().projection(projection)\n  \n\n  drawLegend(e, scale)\n\n  let zoom = d3.zoom()\n      .on('zoom', zoomed)\n  svg.call(zoom)\n\n  g = svg.append('g').attr('class','global')\n  g.selectAll('.zipcode')\n    .data(topojson.feature(zips, zips.objects.zcs).features)\n    .enter()\n    .append('path')\n    .attrs({\n      class:'zipcode',\n      d: path,\n      fill: d => {\n        let value = d.properties.stats[options.propToScaleBy]\n        if(value) return scale(value)\n        return 'black'\n      },\n      stroke: 'white',\n      'stroke-width': 0.1\n    }).on('click', clicked)\n}\n\nfunction zoomed(){\n  g.attr('transform', d3.event.transform)\n}\n\nfunction clicked(d){\n  console.log(d)\n  let stats = d.properties.stats\n  document.querySelector('span.zipcode').innerText = d.properties.ZCTA5CE10\n  for(let key in exampleObject){\n    document.querySelector(`.${key}`).innerText = stats[key] || 'N/A'\n  }\n}\n\nfunction drawLegend(e, scale){\n  //update tooltip area on the side\n  let statEl = document.querySelector('.stats')\n  for(let key in exampleObject){\n    let node = document.createElement('li')\n    let li = statEl.appendChild(node)\n    li.innerHTML = `${key.split('-').join(' ').toUpperCase()}: <span class=\"${key}\"></span>`\n  }\n  let bw=20\n  let d = d3.range(0,10)\n  let l = svg.append('g').attrs({\n    class: 'legend',\n  })\n  l.append('text').text(e[0]).attrs({\n    x: 0,\n    y: 0\n  })\n  let colors = l.append('g').attr('class','colors')\n  colors.selectAll('rect')\n    .data(d)\n    .enter()\n    .append('rect')\n    .attrs({\n      x: d => d*bw + 30,\n      y: -15,\n      width: bw,\n      height: bw,\n      fill: (d,i) => scale(i*((e[1]-e[0])/10))\n    })\n  l.append('text').text(e[1]).attrs({\n    x: colors.node().getBBox().width + 35,\n    y: 0,\n  })\n  let lbb = l.node().getBBox()\n  l.attr('transform', `translate(${width/2-lbb.width} 20)`)\n}\n\nfunction filterZipsAndMapData(zips, min, max){\n  zips.objects.zcs.geometries = zips.objects.zcs.geometries.filter((obj)=>{\n    let z = obj.properties.ZCTA5CE10 \n    obj.properties.stats = zipcodeData[z] || {}\n    return z >= min && z < max\n  })\n  return zips\n}"]}