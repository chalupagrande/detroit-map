{"version":3,"sources":["app.js"],"names":["g","svg","drawMap","detroitZipCodes","fetchMapData","map","width","height","projection","d3","geoAlbersUsa","scale","translate","forEach","zcDataObj","zipcodeData","el","properties","ZCTA5CE10","value","erVisits","VALUE","array","Object","values","min","max","updateMinAndMax","scaleLinear","domain","range","path","geoPath","select","attrs","zoom","on","zoomed","call","append","attr","selectAll","data","enter","d","fill","stroke","clicked","event","transform","console","log","document","querySelector","innerText"],"mappings":"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","file":"app.js","sourcesContent":["/*\n*  RUN\n*/\n\nlet g, svg;\n// fetchMapData()\n// without the fetch\ndrawMap(detroitZipCodes)\n\n\n/*\n*  HELPERS\n*/\n\nfunction fetchMapData(){\n\n  //FETCH EITHER ALL ZIPCODES THEN CONVERT OR JUST DETROIT ZIP CODES\n  // d3.json(\"./geojson/zipcodes.json\", (error, map) => {\n  // d3.json(\"./geojson/detroitZipCodes.json\", (error, map) => {\n  //   if(error) {\n  //     console.log(error)\n  //     throw new Error(\"Chrome has strict security permissions and won't allow you to fetch from a local file system. Use `http-server` to serve these files over HTTP to make the map visualization to work.\")\n  //   } else {\n  //     drawMap(map)\n  //   }\n  // })\n}\n\nfunction drawMap(map){\n  let width = 900,\n      height = 600;\n  \n  // SCALE AND TRANSLATE BASED ON POSITION OF DETROIT\n  let projection = d3.geoAlbersUsa()\n                      .scale(30000)\n                      .translate([width * -5.5, height * 4]);\n\n  // FILTER ALL ZIPCODES TO JUST DETROIT ZIPCODES\n  // let zipcodes = topojson.feature(map, map.objects.zcs)\n  // detroitZipCodes = zipcodes.features.filter(el => {\n  //   let zc = el.properties.ZCTA5CE10\n  //   return zc > 48200 && zc < 48289\n  // })\n\n\n  //MAP DATA TO PROPERTIES IN ZIPCODE DATA\n  map.forEach(el => {\n    let zcDataObj = zipcodeData[el.properties.ZCTA5CE10]\n    let value = 'N/A'\n    if(zcDataObj) value = zcDataObj.erVisits\n    el.properties.VALUE = value\n  })\n\n  //init SCALE\n  let array = Object.values(zipcodeData)\n  let min = d3.min(array, el => el.erVisits)\n  let max = d3.max(array, el => el.erVisits)\n  updateMinAndMax(min, max)\n\n  let scale = d3.scaleLinear()\n                .domain([min, max])\n                .range(['blue', 'red'])\n\n  let path = d3.geoPath().projection(projection)\n  svg = d3.select('svg').attrs({\n    width: width,\n    height: height\n  })\n\n  let zoom = d3.zoom()\n      .on('zoom', zoomed)\n  svg.call(zoom)\n\n  g = svg.append('g').attr('class','global')\n  g.selectAll('.zipcodes')\n    // .data(detroitZipCodes)\n    .data(map)\n    .enter()\n    .append('path')\n    .attrs({\n      d: path,\n      fill: d => scale(d.properties.VALUE),\n      stroke: 'white',\n      'stroke-width': 0.1\n    }).on('click', clicked)\n}\n\nfunction zoomed(){\n  g.attr('transform', d3.event.transform)\n}\n\nfunction clicked(d){\n  console.log(d)\n  document.querySelector('.zipcode').innerText = d.properties.ZCTA5CE10\n  document.querySelector('.result').innerText = d.properties.VALUE\n  \n}\n\nfunction updateMinAndMax(min, max){\n  document.querySelector('.min').innerText = min\n  document.querySelector('.max').innerText = max\n}"]}